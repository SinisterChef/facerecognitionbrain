"use strict";(self.webpackChunkfacerecognitionbrain=self.webpackChunkfacerecognitionbrain||[]).push([[4217],{4217:(e,t,o)=>{o.d(t,{ExportVideoInstance:()=>c});var s=o(4409);const a=["webm","ogg","mp4","x-matroska"],n=["vp9","vp9.0","vp8","vp8.0","avc1","av1","h265","h.265","h264","h.264","opus","pcm","aac","mpeg","mp4a"];class c{constructor(e,t){this._supportedTypes=[],this._exportVideo=async e=>{const t=this._container.canvas.element;if(t)return new Promise((o=>{var a,n,c;const i=t.captureStream(null!==(a=e.fps)&&void 0!==a?a:this._container.actualOptions.fpsLimit),p=null!==(n=e.mimeType)&&void 0!==n?n:this._supportedTypes[0],r=new MediaRecorder(i,{mimeType:p}),d=[];r.addEventListener("dataavailable",(e=>{d.push(e.data)})),r.addEventListener("stop",(()=>{o(new Blob(d,{type:p}))})),r.start(),setTimeout((()=>{r.stop()}),null!==(c=e.duration)&&void 0!==c?c:5*s.Xu)}))},this._container=e,this._engine=t,this._supportedTypes=function(){const e=e=>MediaRecorder.isTypeSupported(e),t=[];return a.forEach((o=>{const s="video/".concat(o);n.forEach((o=>["".concat(s,";codecs=").concat(o),"".concat(s,";codecs=").concat(o.toUpperCase())].forEach((o=>{e(o)&&t.push(o)})))),e(s)&&t.push(s)})),t}()}async export(e,t){const o={supported:!1};if("video"===e)o.supported=!0,o.blob=await this._exportVideo(t);return o}}}}]);
//# sourceMappingURL=4217.4c14a4e1.chunk.js.map